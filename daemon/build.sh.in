#!/bin/sh

set -e

. @CMAKE_SOURCE_DIR@/util/app.sh
. @CMAKE_SOURCE_DIR@/util/docker.sh

assert_app_name $APP_NAME

if [ -n "$VERBOSE" ]
then
	set -x
else
	exec 1>/dev/null 2>&1
fi

dockerfile=$1
[ -n "$dockerfile" ]

rel_source=$2
[ -n "$rel_source" ]

source=$(realpath "$rel_source")
target=$(realpath $APP_NAME)

[ -d "$source" ]
mkdir -p $target

image=$APP_NAME-daemon:build
docker image rm -f $image 2>/dev/null

go_version=$(sed -En 's/^go ([.[:digit:]]+)$/\1/p' "$source"/go.mod)
[ -n "$go_version" ]
golang_tag=$(guess_image_tag golang $go_version)
[ -n "$golang_tag" ]

go_version_major=$(printf $go_version | cut -d . -f 1)
go_version_minor=$(printf $go_version | cut -d . -f 2)
# >= 1.18 ?
if [ $go_version_major -gt 1 ] || [ $go_version_minor -ge 18 ]
then
	goflags="-buildvcs=false"
fi

work_dir=$(mktemp --dry-run -d)
docker build --force-rm -t $image -f "$dockerfile" \
	   --build-arg TAG=$golang_tag \
	   --build-arg DAEMON_NAME=$(daemon_name $APP_NAME) \
	   --build-arg GOFLAGS=$goflags \
	   --build-arg WORKDIR=$work_dir \
	   "$source"

docker run --rm -t \
	   --mount type=bind,source="$target",target=/target \
	   $image cp $work_dir/bundle.tar.gz /target/

docker image rm -f $image
