#!/bin/sh

set -e

APP_SOURCE_DIR=@APP_SOURCE_DIR@

. @CMAKE_SOURCE_DIR@/util/common.sh
. @CMAKE_SOURCE_DIR@/util/app.sh
. @CMAKE_SOURCE_DIR@/util/docker.sh

assert_variables SOURCE_DIR \
				 DEST_DIR \
				 APP \
				 APP_SOURCE_DIR \
				 DOCKERFILE

assert_app_name $(app_name $APP)

source=$(realpath $SOURCE_DIR)
[ -d $source ]

mkdir -p $DEST_DIR
target=$(realpath $DEST_DIR)

[ -f $DOCKERFILE ]

image=@PROJECT_NAME@/$(app_name $APP):build
# docker image rm -f $image 2>/dev/null

go_version=$(sed -En 's/^go ([.[:digit:]]+)$/\1/p' $source/go.mod)
[ -n "$go_version" ]
golang_tag=$(guess_image_tag golang $go_version)
[ -n "$golang_tag" ]

go_version_major=$(printf $go_version | cut -d . -f 1)
go_version_minor=$(printf $go_version | cut -d . -f 2)
# >= 1.18 ?
if [ $go_version_major -gt 1 ] || [ $go_version_minor -ge 18 ]
then
	goflags="-buildvcs=false"
fi

work_dir=$(mktemp --dry-run -d)
docker build --force-rm -t $image -f $DOCKERFILE \
	   --build-arg TAG=$golang_tag \
	   --build-arg DAEMON_NAME=$(daemon_name $(app_name $APP)) \
	   --build-arg GOFLAGS=$goflags \
	   --build-arg WORKDIR=$work_dir \
	   $source

docker run --rm -t \
	   --mount type=bind,source=$target,target=/target \
	   $image cp $work_dir/bundle.tar.gz /target/

docker image rm -f $image
