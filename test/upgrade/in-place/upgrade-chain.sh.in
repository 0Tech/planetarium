#!/bin/sh

set -e

. @CMAKE_SOURCE_DIR@/util/common.sh
. @CMAKE_SOURCE_DIR@/util/app.sh
. @CMAKE_SOURCE_DIR@/test/util/service.sh

assert_variables CHAIN_ID \
				 APP \
				 VERSION

assert_app_name $(app_name $APP)

get_height() {
	# must be validator because of dummyd
	service_exec_as_user $(service_name validator $(region_name 0) $CHAIN_ID) cosmovisor height
}

get_bundle_path() {
	printf @APP_PREPARATION_DIR@/request/$APP/$VERSION/bundle.tar.gz
}

download_bundle() {
	for _admin in $(get_control_services $CHAIN_ID)
	do
		service_push $_admin $(get_bundle_path) /root/$upgrade_name.tar.gz
	done
}

get_bundle_info() {
	local url=https://@PROJECT_NAME@.example.com/$upgrade_name.tar.gz
	local checksum=sha256:$(sha256sum $(get_bundle_path) | awk '{print $1}')
	cat <<EOF | jq -c .
{
  "binaries": {
    "any": "$url?checksum=$checksum"
  }
}
EOF
}

place_binary() {
	for _admin in $(get_control_services $CHAIN_ID)
	do
		service_exec $_admin "cd && ansible-playbook -i inventory upgrade.yml \\
-e src=$upgrade_name.tar.gz \\
-e upgrade_name=$upgrade_name"
	done
}

# returns proposal_id
submit_upgrade() {
	local height=$1

	versions="v46 v44"
	for _version in $versions
	do
		if _proposal_id=$(eval submit_upgrade_$_version $height)
		then
			printf $_proposal_id
			return
		fi
	done

	false
}

submit_upgrade_v46() {
	local height=$1

	local info=$(get_bundle_info)
	local seat=$(service_name seat $(region_name 0) $CHAIN_ID)

	local authority=$(service_exec_as_user $seat cosmovisor "$daemon query auth module-accounts" | jq -er '.accounts[] | select(.name == "gov") | .base_account.address')
	local proposal=$(mktemp -p .)
	chmod a+r $proposal
	cat <<EOF >$proposal
{
  "messages": [
    {
      "@type": "/cosmos.upgrade.v1beta1.MsgSoftwareUpgrade",
      "authority": "$authority",
      "plan": {
        "name": "$upgrade_name",
        "height": "$height",
        "info": $(printf $info | jq -R @text)
      }
    }
  ],
  "metadata": "",
  "title": "$upgrade_name upgrade",
  "summary": "$upgrade_name upgrade",
  "deposit": "@TEST_STATE_MIN_DEPOSIT@@TEST_STATE_BOND_DENOM@"
}
EOF
	service_push $seat $proposal /tmp/proposal.json

	local response=$(service_exec_as_user $seat cosmovisor "$daemon tx gov submit-proposal /tmp/proposal.json --from operator --gas auto --yes")
	[ -n "$response" ]

	service_exec $seat "rm /tmp/proposal.json"
	rm $proposal

	local txhash=$(printf "$response" | jq -er .txhash)
	while ! _tx=$(get_tx $txhash 2>/dev/null)
	do
		sleep 1
	done

	local candidate=$(echo $_tx | jq -er '.events | map(select(.type == "submit_proposal")) | map(.attributes[])[] | select(.key == "proposal_id") | .value')
	if [ -n "$candidate" ]
	then
		printf $candidate
	fi

	echo $_tx | jq -er '.events | map(select(.type == "submit_proposal")) | map(.attributes[])[] | select(.key == "'$(printf proposal_id | base64)'") | .value' | base64 -d
}

submit_upgrade_v44() {
	local height=$1

	local info=$(get_bundle_info)
	local seat=$(service_name seat $(region_name 0) $CHAIN_ID)
	local response=$(service_exec_as_user $seat cosmovisor "$daemon tx gov submit-proposal software-upgrade $upgrade_name --upgrade-height $height --upgrade-info '$info' --title '$upgrade_name upgrade' --description '$upgrade_name upgrade' --deposit @TEST_STATE_MIN_DEPOSIT@@TEST_STATE_BOND_DENOM@ --from operator --gas auto --gas-adjustment 1.1 --yes")
	[ -n "$response" ]

	local txhash=$(printf "$response" | jq -er .txhash)
	while ! _tx=$(get_tx $txhash 2>/dev/null)
	do
		sleep 1
	done
	echo $_tx | jq -er '.events | map(select(.type == "submit_proposal")) | map(.attributes[])[] | select(.key == "'$(printf proposal_id | base64)'") | .value' | base64 -d
}

get_tx() {
	local txhash=$1

	local seat=$(service_name seat $(region_name 0) $CHAIN_ID)
	service_exec_as_user $seat cosmovisor "$daemon query tx $txhash"
}
 
vote() {
	local proposal_id=$1

	for _ri in $(seq 0 $(expr @TEST_NUM_REGIONS@ - 1))
	do
		_region_id=$(region_name $_ri)

		_seat=$(service_name seat $_region_id $CHAIN_ID)
		service_exec_as_user $_seat cosmovisor "$daemon tx gov vote $proposal_id VOTE_OPTION_YES --from operator --gas auto --yes"
	done
}

daemon=$(daemon_home $(app_name $APP))/cosmovisor/current/bin/$(daemon_name $(app_name $APP))

upgrade_name=$(upgrade_name $(app_name $APP) $VERSION)
[ -n "$upgrade_name" ]

upgrade_height=$(expr $(get_height) + 20)
proposal_id=$(submit_upgrade $upgrade_height)
vote $proposal_id

download_bundle
place_binary

# wait for the upgrade
while true
do
	if [ "$(get_height)" -ge $(expr $upgrade_height + 1) ] 2>/dev/null
	then
		break
	fi

	sleep 1
done
