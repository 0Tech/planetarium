#!/bin/sh

set -e

# ansible.builtin.template
DAEMON_HOME={{ daemon_home }}
TYPE={{ type }}
CHAIN_ID={{ chain_id }}
CONFIG='{{ config | to_json }}'
TIMEOUT_PROPOSE={{ timeout_propose }}
TIMEOUT_PREVOTE={{ timeout_prevote }}
TIMEOUT_PRECOMMIT={{ timeout_precommit }}
TIMEOUT_COMMIT={{ timeout_commit }}
KEYRING_BACKEND={{ keyring_backend }}

replace_toml() {
	local file=$1
	local key=$2
	local value=$3

	local dots=$(echo $key | grep -o '\.' | wc -l)
	if [ $dots -gt 0 ]
	then
		_table=$(echo $key | cut -d . -f 1-$dots)
		_key=$(echo $key | cut -d . -f $(expr $dots + 1))
		sed -Ei $file -e '/^\['$_table'\]$/,/^\[.+\]$/{s#^'$_key'[[:blank:]]*=.*$#'$_key' = '$value'#}'
	else
		# GNU sed only
		sed -Ei $file -e '0,/^\[.+\]$/{s#^'$key'[[:blank:]]*=.*$#'$key' = '$value'#}'
	fi
}

set_config() {
	local rel_file=$1
	local key=$2
	local value=$3

	local file=$DAEMON_HOME/config/$rel_file
	replace_toml $file $key $value
}

set_configs_from_vars() {
	for _overrides in $(echo $CONFIG | jq -ce .[])
	do
		_file=$(echo $_overrides | jq -er .file)
		for _override in $(echo $_overrides | jq -ce .overrides[])
		do
			_key=$(echo $_override | jq -er .key)
			_value=$(echo $_override | jq .value)

			_set=true
			if [ "$(echo $_override | jq -c .types)" != null ]
			then
				_set=
				for _type in $(echo $_override | jq -er .types[])
				do
					if [ $_type = $TYPE ]
					then
						_set=true
						break
					fi
				done
			fi

			if [ -n "$_set" ]
			then
				set_config $_file $_key $_value
			fi
		done
	done
}

## update config.toml ##
set_config config.toml timeout_propose '"'$TIMEOUT_PROPOSE'"'
set_config config.toml timeout_prevote '"'$TIMEOUT_PREVOTE'"'
set_config config.toml timeout_precommit '"'$TIMEOUT_PRECOMMIT'"'
set_config config.toml timeout_commit '"'$TIMEOUT_COMMIT'"'

## update client.toml ##
set_config client.toml chain-id '"'$CHAIN_ID'"'
set_config client.toml keyring-backend '"'$KEYRING_BACKEND'"'
set_config client.toml output '"json"'

## override ##
set_configs_from_vars
