#!/bin/sh

set -xe

. @CMAKE_SOURCE_DIR@/util/app.sh

assert_app_name $APP_NAME

_get_repo() {
	local url=$1
	printf $url | sed -En 's#^.*github.com/([^/]+/[^/]+).*$#\1#p'
}

get_asset() {
	local url=$1
	local version=$2
	local dest=$3

	local repo=$(_get_repo $url)
	[ -n "$repo" ]
	for _asset in $(curl -s https://api.github.com/repos/$repo/releases/tags/v$version | jq -ce .assets[])
	do
		_name=$(echo $_asset | jq -er .name)
		if echo $_name | grep linux | grep amd64
		then
			_url=$(echo $_asset | jq -er .url)
			curl -Lo $dest -H Accept:application/octet-stream $_url
			break
		fi
	done
}

get_tarball() {
	local url=$1
	local version=$2
	local dest=$3

	local repo=$(_get_repo $url)
	[ -n "$repo" ]
	_url=$(curl -s https://api.github.com/repos/$repo/releases/tags/v$version | jq -er .tarball_url)
	curl -Lo $dest $_url
}

local=$1
[ -n "$local" ]

versions="@FIXTURE_DAEMON_VERSION@ @FIXTURE_NEW_DAEMON_VERSION@"
for _version in $(echo $versions | tr ' ' '\n')
do
	if echo $_version | grep -qE '^default$'
	then
		_version="dummy local"
	fi
	canonical_versions="$canonical_versions $_version"
done

for _version in $(echo $canonical_versions | tr ' ' '\n' | sort | uniq)
do
	_dest_dir=$APP_NAME/$_version
	mkdir -p $_dest_dir
	case $_version in
		local)
			if [ ! -f "$local" ]
			then
				cmake --build @CMAKE_BINARY_DIR@ --target build_daemon
			fi
			cp "$local" $_dest_dir/bundle.tar.gz
			;;
		dummy)
			rm -f $_dest_dir/bundle.tar.gz
			_work_dir=$(mktemp -dp .)
			sh -c "cd $_work_dir && cp -r @CMAKE_CURRENT_SOURCE_DIR@/dummy . && cd dummy && mv dummyd $(daemon_name $APP_NAME) && tar -czf ../bundle.tar.gz *"
			mv $_work_dir/bundle.tar.gz $_dest_dir/
			rm -rf $_work_dir
			;;
		*)
			if [ ! -f $_dest_dir/bundle.tar.gz ]
			then
				_work_dir=$(mktemp -dp .)

				case $APP_NAME in
					cosmos-sdk)
						get_tarball @APP_URL@ $_version $_work_dir/source.tar.gz
						_source_dir=$(basename $(tar -tf $_work_dir/source.tar.gz | head -n 1))
						sh -c "cd $_work_dir && tar -xzf source.tar.gz && sh @DAEMON_BINARY_DIR@/build.sh @DAEMON_SOURCE_DIR@/Dockerfile $_source_dir"
						;;
					gaia)
						get_asset @APP_URL@ $_version $_work_dir/$(daemon_name $APP_NAME)
						sh -c "cd $_work_dir && tar -czf bundle.tar.gz $(daemon_name $APP_NAME)"
						;;
				esac

				mv $_work_dir/bundle.tar.gz $_dest_dir/
				rm -rf $_work_dir
			fi
			;;
	esac
done
