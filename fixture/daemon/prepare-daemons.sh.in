#!/bin/sh

set -xe

get_repo() {
	echo @APP_URL@ | sed -En 's#^.*github.com/([^/]+/[^/]+).*$#\1#p'
}

get_asset() {
	local version=$1
	local dest=$2

	local repo=$(get_repo)
	[ -n "$repo" ]
	for _asset in $(curl -s https://api.github.com/repos/$repo/releases/tags/v$version | jq -ce .assets[])
	do
		_name=$(echo $_asset | jq -er .name)
		if echo $_name | grep linux | grep amd64
		then
			_url=$(echo $_asset | jq -er .url)
			curl -Lo $dest -H Accept:application/octet-stream $_url
			break
		fi
	done
}

get_tarball() {
	local version=$1
	local dest=$2

	local repo=$(get_repo)
	[ -n "$repo" ]
	_url=$(curl -s https://api.github.com/repos/$repo/releases/tags/v$version | jq -er .tarball_url)
	curl -Lo $dest $_url
}

local=$1
[ -n "$local" ]

versions="@FIXTURE_DAEMON_VERSION@ @FIXTURE_NEW_DAEMON_VERSION@"
for _version in $(echo $versions | tr ' ' '\n')
do
	if echo $_version | grep -qE '^default$'
	then
		_version="dummy local"
	fi
	canonical_versions="$canonical_versions $_version"
done

for _version in $(echo $canonical_versions | tr ' ' '\n' | sort | uniq)
do
	case $_version in
		local)
			mkdir -p $_version
			if [ ! -f "$local" ]
			then
				cmake --build @CMAKE_BINARY_DIR@ --target build_daemon
			fi
			cp "$local" $_version/bundle.tar.gz
			;;
		dummy)
			sh -c "cd $_version && rm -f bundle.tar.gz && tar -czf bundle.tar.gz *"
			;;
		*)
			if [ ! -f $_version/bundle.tar.gz ]
			then
				mkdir -p $_version
				_workdir=$(mktemp -dp .)

				case @APP_NAME@ in
					cosmos-sdk)
						get_tarball $_version $_workdir/source.tar.gz
						# TODO: coupling too tight
						_daemon_dir=$(dirname "$local")
						sh -c "cd $_workdir && tar -xzf source.tar.gz && sh $_daemon_dir/build.sh $_daemon_dir/Dockerfile @APP_NAME@-$_version"
						;;
					gaia)
						get_asset $_version $_workdir/@DAEMON_NAME@
						sh -c "cd $_workdir && tar -czf bundle.tar.gz @DAEMON_NAME@"
						;;
				esac

				mv $_workdir/bundle.tar.gz $_version/
				rm -rf $_workdir
			fi
			;;
	esac
done
