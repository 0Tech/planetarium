#!/usr/bin/env python3

import argparse
import re
import yaml
import os

def region_name(index):
    return 'region{:02d}'.format(index)

def get_networks(num_regions):
    networks = {}

    networks['internet'] = {
        'external': True
    }

    for ri in range(num_regions):
        name = region_name(ri)
        networks[name] = None

    return networks

def get_services(num_regions, num_sentries, num_fulls):
    services = {}

    solos = [
        'administrator',
        'validator',
        'seed',
        'seat',
    ]
    scalables = [
        'sentry',
        'full',
    ]
    for ri in range(num_regions):
        # (type, hostname) pairs
        hints = []
        for i in range(num_sentries):
            type = 'sentry'
            hostname = '{}{:02d}'.format(type, i)
            hints.append((type, hostname))
        for i in range(num_fulls):
            type = 'full'
            hostname = '{}{:02d}'.format(type, i)
            hints.append((type, hostname))
        for type in solos:
            hostname = type
            hints.append((type, hostname))

        for type, hostname in hints:
            service = {}
            service['image'] = '@PROJECT_NAME@/cosmovisor:@COSMOVISOR_VERSION@'

            # networks
            networks = {}
            network_private = region_name(ri)
            networks[network_private] = {
                'aliases': [
                    hostname,
                ],
            }

            if type in ['sentry', 'seed', 'full']:
                network_public = 'internet'
                networks[network_public] = None
            service['networks'] = networks

            service_name = '.'.join([hostname, region_name(ri)])
            services[service_name] = service

    return services

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--output', '-o', type=str,
                        help="output file path (default: stdout)")
    # parser.add_argument('--name', '-n', type=str, required=True,
    #                     help="the name of the chains (docker-compose name)")
    parser.add_argument('--regions', '-r', type=int, default=1,
                        help="the number of regions in the fixture")
    parser.add_argument('--sentries', '-s', type=int, default=1,
                        help="the number of sentries in each region")
    parser.add_argument('--fulls', type=int, default=1,
                        help="the number of full nodes in each region")
    args = parser.parse_args()

    document = {
        # 'name': args.name,
        'services': get_services(args.regions, args.sentries, args.fulls),
        'networks': get_networks(args.regions),
    }

    yaml.SafeDumper.add_representer(
        type(None),
        lambda dumper, value: dumper.represent_scalar(u'tag:yaml.org,2002:null', ''))

    if args.output is not None:
        with open(args.output, 'w') as f:
            yaml.safe_dump(document, f)
    else:
        print(yaml.safe_dump(document, default_flow_style=False))

if __name__ == '__main__':
    main()
