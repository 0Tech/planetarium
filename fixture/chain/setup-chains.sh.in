#!/bin/sh

set -xe

. @CMAKE_SOURCE_DIR@/fixture/util/common.sh
. @CMAKE_SOURCE_DIR@/fixture/util/service.sh

# TODO: add the fixture
cosmovisor=@COSMOVISOR_BINARY_DIR@/cosmovisor
prepare_cosmovisor() {
	if [ ! -f $cosmovisor ]
	then
		cmake --build @CMAKE_BINARY_DIR@ --target build_cosmovisor
	fi
}

gather_configs() {
	local region_id=$1
	local chain_id=$2

	local admin=$(service_name administrator $region_id $chain_id)

	service_exec $admin "cd && ansible-playbook -i inventory config.yml \\
-e phase=gather"
	mkdir $_dynamic_dir/$region_id
	service_fetch $admin /root/artifact/seed/config.fact $_dynamic_dir/$region_id/
	service_fetch $admin /root/artifact/seed/daemon.fact $_dynamic_dir/$region_id/
}

apply_configs() {
	local region_id=$1
	local chain_id=$2

	local admin=$(service_name administrator $region_id $chain_id)

	service_push $admin seed.json /root/seed.json
	service_exec $admin "cd && ansible-playbook -i inventory config.yml"
}

assert_variables NUM_CHAINS \
				 NUM_REGIONS \
				 NUM_SENTRIES

chain_id=${1:-$(chain_name 0)}

prepare_cosmovisor

for _ri in $(seq 0 $(expr $NUM_REGIONS - 1))
do
	_region_id=$(region_name $_ri)

	_admin=$(service_name administrator $_region_id $chain_id)

	# push binaries to admin
	_version=@FIXTURE_DAEMON_VERSION@
	service_exec $_admin "mkdir -p ~/daemon/$_version"
	service_push $_admin $cosmovisor "/root/"
	# service_push $_admin @DAEMON_BINARY_DIR@/$_version/bundle.tar.gz ~/daemon/$_version/
	service_push $_admin @DAEMON_BINARY_DIR@/$_version/bundle.tar.gz "/root/"

	# install cosmovisor
	service_exec $_admin "cd && ansible-playbook -i inventory cosmovisor.yml \\
-e src=cosmovisor \\
-e daemon_name=@DAEMON_NAME@ \\
-e daemon_home=@DAEMON_HOME@"

	# install daemon
	service_exec $_admin "cd && ansible-playbook -i inventory daemon.yml \\
-e src=bundle.tar.gz \\
-e region_id=$_ri \\
-e chain_id=$chain_id \\
-e timeout_propose=@FIXTURE_CONFIG_TIMEOUT_PROPOSE@ \\
-e timeout_prevote=@FIXTURE_CONFIG_TIMEOUT_PREVOTE@ \\
-e timeout_precommit=@FIXTURE_CONFIG_TIMEOUT_PRECOMMIT@ \\
-e timeout_commit=@FIXTURE_CONFIG_TIMEOUT_COMMIT@ \\
-e keyring_backend=@FIXTURE_CLIENT_KEYRING_BACKEND@"
done

_genesis_dir=genesis/$chain_id
rm -rf $_genesis_dir
mkdir -p $_genesis_dir

_dynamic_dir=seeds/$chain_id
rm -rf $_dynamic_dir
mkdir -p $_dynamic_dir

for _ri in 0
do
	_region_id=$(region_name $_ri)

	_admin=$(service_name administrator $_region_id $chain_id)

	# configure
	service_exec $_admin "cd && ansible-playbook -i inventory config.yml \\
-e dest=seed.json"
	service_fetch $_admin /root/seed.json seed.json

	# generate genesis
	service_exec $_admin "cd && ansible-playbook -i inventory genesis.yml \\
-e dest=genesis.json \\
-e bond_denom=@FIXTURE_STATE_BOND_DENOM@ \\
-e balance=@FIXTURE_STATE_BALANCE@ \\
-e delegation=@FIXTURE_STATE_DELEGATION@ \\
-e unbonding_time=@FIXTURE_STATE_UNBONDING_TIME@ \\
-e min_deposit=@FIXTURE_STATE_MIN_DEPOSIT@ \\
-e voting_period=@FIXTURE_STATE_VOTING_PERIOD@"
	service_fetch $_admin /root/genesis.json genesis.json
done

# _pending_pids=
for _ri in $(seq 0 $(expr $NUM_REGIONS - 1))
do
	_region_id=$(region_name $_ri)

	_admin=$(service_name administrator $_region_id $chain_id)

	# configure
	service_push $_admin seed.json /root/seed.json
	service_exec $_admin "cd && ansible-playbook -i inventory config.yml \\
-e dest=seed.json"

	# blocksync
	service_push $_admin genesis.json /root/genesis.json
	service_exec $_admin "cd && ansible-playbook -i inventory blocksync.yml \\
-e src=genesis.json"
# 	_pending_pids="$_pending_pids $!"
done
# wait_pids $_pending_pids

# run cosmovisor
for _ri in $(seq 0 $(expr $NUM_REGIONS - 1))
do
	_region_id=$(region_name $_ri)

	_admin=$(service_name administrator $_region_id $chain_id)

	service_exec $_admin "cd && ansible -i inventory all -m ansible.builtin.service -a 'name=cosmovisor enabled=true state=started'"
done

unhealthy_services=$(get_services _ _ $chain_id | grep -Ev '^administrator\.')
while [ -n "$unhealthy_services" ]
do
	_services="$unhealthy_services"
	unhealthy_services=
	for _service in $_services
	do
		if [ $(service_health $_service) != healthy ]
		then
			unhealthy_services="$unhealthy_services $_service"
			if [ $(service_status $_service) != running ]
			then
				echo "Error on: " $_service >&2
				false
			fi
			sleep 1
		fi
	done
done
