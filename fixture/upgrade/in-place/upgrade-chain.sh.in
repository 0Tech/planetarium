#!/bin/sh

set -xe

project_name=$(echo $1 | tr [:upper:] [:lower:])
[ -n "$project_name" ]

chain_index=$2
[ "$chain_index" -ge 0 ]

daemon=@DAEMON_HOME@/cosmovisor/current/bin/@DAEMON_NAME@

upgrade_name=@FIXTURE_CHAIN_UPGRADE_NAME@

get_height() {
	docker exec ${project_name}_chain-$chain_index-region-0-seat_1 height
}

get_containers() {
	docker ps --no-trunc --format '{{json .}}' | jq -r 'select(.Names | test("^'$project_name'_chain-'$chain_index'")) | .Names'
}

create_bundle() {
	local version=@FIXTURE_NEW_DAEMON_VERSION@
	if [ $version = default ]
	then
		version=dummy
	fi

	cp @DAEMON_BINARY_DIR@/$version/bundle.tar.gz $upgrade_name.tar.gz
}

upload_bundle() {
	docker cp $upgrade_name.tar.gz ${project_name}_chain-${chain_index}-region-0-seat_1:@FIXTURE_SYNCDIR@
}

download_bundle() {
	local name=$(echo $upgrade_name | tr [:upper:] [:lower:])
	local upgrade_dir=@DAEMON_HOME@/cosmovisor/upgrades/$name

	for _container in $(get_containers)
	do
		docker exec $_container sh -c "mkdir -p $upgrade_dir/bin && cd $upgrade_dir && tar -xzf @FIXTURE_SYNCDIR@/$upgrade_name.tar.gz && chmod +x @DAEMON_NAME@ && mv @DAEMON_NAME@ bin"
	done
}

# returns proposal_id
submit_upgrade() {
	local height=$1

	versions="v48 v44"
	for _version in $versions
	do
		if _proposal_id=$(eval submit_upgrade_$_version $height)
		then
			echo $_proposal_id
			break
		fi
	done
}

submit_upgrade_v48() {
	local height=$1

	local checksum=sha256:$(sha256sum $upgrade_name.tar.gz | awk '{print $1}')
	local info='{"binaries":{"any":"file://'@FIXTURE_SYNCDIR@/$upgrade_name.tar.gz'?checksum='$checksum'"}}'
	local response=$(docker exec ${project_name}_chain-$chain_index-region-0-seat_1 $daemon tx upgrade software-upgrade $upgrade_name --upgrade-height $height --upgrade-info $info --title $upgrade_name --summary "$upgrade_name upgrade" --deposit @FIXTURE_STATE_MIN_DEPOSIT@@FIXTURE_STATE_BOND_DENOM@ --from operator --gas auto --yes)
	[ -n "$response" ]

	local txhash=$(echo "$response" | jq -er .txhash)
	while ! _tx=$(get_tx $txhash 2>/dev/null)
	do
		sleep 1
	done
	echo $_tx | jq -er '.events[] | select(.type == "submit_proposal") | .attributes[] | select(.key == "proposal_id") | .value'
}

submit_upgrade_v44() {
	local height=$1

	local checksum=sha256:$(sha256sum $upgrade_name.tar.gz | awk '{print $1}')
	local info='{"binaries":{"any":"file://'@FIXTURE_SYNCDIR@/$upgrade_name.tar.gz'?checksum='$checksum'"}}'
	local response=$(docker exec ${project_name}_chain-$chain_index-region-0-seat_1 $daemon tx gov submit-proposal software-upgrade $upgrade_name --upgrade-height $height --upgrade-info $info --title $upgrade_name --description "$upgrade_name upgrade" --deposit @FIXTURE_STATE_MIN_DEPOSIT@@FIXTURE_STATE_BOND_DENOM@ --from operator --gas auto --gas-adjustment 1.1 --yes)
	[ -n "$response" ]

	local txhash=$(echo "$response" | jq -er .txhash)
	while ! _tx=$(get_tx $txhash 2>/dev/null)
	do
		sleep 1
	done
	echo $_tx | jq -er '.events | map(select(.type == "submit_proposal")) | .[0].attributes[] | select(.key == "'$(printf proposal_id | base64)'") | .value' | base64 -d
}

get_tx() {
	local txhash=$1

	docker exec ${project_name}_chain-$chain_index-region-0-full_1 $daemon query tx $txhash
}
 
vote() {
	local proposal_id=$1

	for _region_index in $(seq 0 $(expr @FIXTURE_NUM_REGIONS@ - 1))
	do
		docker exec ${project_name}_chain-$chain_index-region-$_region_index-seat_1 $daemon tx gov vote $proposal_id VOTE_OPTION_YES --from operator --gas auto --yes
	done
}

create_bundle
upload_bundle

upgrade_height=$(expr $(get_height) + 20)
proposal_id=$(submit_upgrade $upgrade_height)
vote $proposal_id

if [ "@DAEMON_ALLOW_DOWNLOAD_BINARIES@" != true ]
then
	download_bundle
fi

# wait for the upgrade
while true
do
	if [ "$(get_height)" -ge $(expr $upgrade_height + 1) ] 2>/dev/null
	then
		break
	fi

	sleep 1
done
